import httpx
import os
from typing import Optional
from textual.app import App, ComposeResult
from textual.widgets import Header, Input, Static, Footer
from textual.containers import Vertical, ScrollableContainer
from textual.reactive import var
from textual.binding import Binding
from config import API_BASE_URL, TOKEN_FILE_PATH
from api import send_chat_request, fetch_conversations, load_conversation_history

class FourTAIApp(App):
    """Giao di·ªán TUI t·ªëi gi·∫£n cho 4T AI, c√≥ kh·∫£ nƒÉng l∆∞u token."""

    BINDINGS = [
        Binding("ctrl+c", "quit", "Tho√°t"),
        Binding("ctrl+l", "new_chat", "Chat M·ªõi (Clean m√†n h√¨nh)"),
    ]

    CSS = """
    Screen { background: #0D1117; color: #C9D1D9; }
    #login-area { height: auto; padding: 1; }
    #chat-history { padding: 1; }
    #input-area { dock: bottom; height: auto; padding: 0 1; }
    #chat-input { margin: 1 0; border: round #30363D; }
    #chat-input:focus { border: round #58A6FF; }
    #file-status { height: 1; color: #888; padding-left: 1; }
    .help-box {
        margin: 1 2;
        padding: 2 3;
        background: #1C2526;
        color: #C9D1D9;
        border: double #58A6FF;
        max-width: 80;
        text-align: left;
    }
    .help-item {
        padding: 0 1;
        margin: 0 1;
    }
    """

    current_conversation_id = var(None, init=False)
    attached_file_path = var(None, init=False)

    def __init__(self):
        super().__init__()
        self.http_client: Optional[httpx.AsyncClient] = None

    def compose(self) -> ComposeResult:
        yield Header()
        with Vertical(id="login-area"):
            yield Static("[bold]Vui l√≤ng nh·∫≠p Access Token c·ªßa b·∫°n cho 4T AI v√† nh·∫•n Enter:[/bold]")
            yield Input(placeholder="d√°n token...", password=True, id="token-input")
        yield ScrollableContainer(id="chat-history")
        with Vertical(id="input-area"):
            yield Static("", id="file-status")
            yield Input(
                placeholder="Nh·∫≠p tin nh·∫Øn ho·∫∑c /help ƒë·ªÉ xem l·ªánh...",
                id="chat-input",
                disabled=True,
            )
        yield Footer()

    async def on_mount(self) -> None:
        """Ki·ªÉm tra token ƒë√£ l∆∞u khi kh·ªüi ƒë·ªông."""
        if os.path.exists(TOKEN_FILE_PATH):
            try:
                with open(TOKEN_FILE_PATH, "r") as f:
                    token = f.read().strip()
                if token:
                    await self.perform_login(token, is_saved_token=True)
                else:
                    self.query_one("#token-input").focus()
            except Exception as e:
                self.mount_info_log(f"[red]L·ªói khi ƒë·ªçc token: {e}[/red]")
                self.query_one("#token-input").focus()
        else:
            self.query_one("#token-input").focus()

    async def perform_login(self, token: str, is_saved_token: bool = False) -> None:
        """Th·ª±c hi·ªán ƒëƒÉng nh·∫≠p v·ªõi token."""
        self.http_client = httpx.AsyncClient(
            base_url=API_BASE_URL,
            headers={"Authorization": f"Bearer {token}"},
            timeout=300.0,
        )
        self.query_one("#login-area").display = False
        chat_input = self.query_one("#chat-input")
        chat_input.disabled = False
        chat_input.focus()

        if is_saved_token:
            self.mount_info_log("[green]ƒê√£ t·ª± ƒë·ªông ƒëƒÉng nh·∫≠p v√†o 4T AI th√†nh c√¥ng.[/green]")
        else:
            self.mount_info_log("[green]ƒêƒÉng nh·∫≠p v√†o 4T AI th√†nh c√¥ng! Token ƒë√£ ƒë∆∞·ª£c l∆∞u cho l·∫ßn sau.[/green]")

        # Hi·ªÉn th·ªã th√¥ng b√°o ch√†o m·ª´ng v√† l·ªánh /help
        self.mount_info_log("[bold cyan]Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi 4T AI! Nh·∫≠p tin nh·∫Øn ho·∫∑c xem c√°c l·ªánh d∆∞·ªõi ƒë√¢y:[/bold cyan]")
        await self.handle_client_command("/help", self.query_one("#chat-history"))

    def watch_attached_file_path(self, new_path: Optional[str]) -> None:
        """C·∫≠p nh·∫≠t tr·∫°ng th√°i file ƒë√≠nh k√®m."""
        status_widget = self.query_one("#file-status", Static)
        if new_path:
            filename = os.path.basename(new_path)
            status_widget.update(f"üìé ƒê√≠nh k√®m: [bold cyan]{filename}[/]. G√µ /clearfile ƒë·ªÉ g·ª°.")
        else:
            status_widget.update("")

    async def handle_client_command(self, command: str, chat_history: ScrollableContainer) -> None:
        """X·ª≠ l√Ω c√°c l·ªánh client-side cho 4T AI."""
        parts = command.split(" ", 1)
        cmd = parts[0]
        args = parts[1].strip() if len(parts) > 1 else ""

        if cmd == "/help":
            help_text = """[bold][#58A6FF]üìö H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG 4T AI[/bold]

[#58A6FF]C√°c l·ªánh c√≥ s·∫µn:[/]
> [bold][#58A6FF]/new[/]: B·∫Øt ƒë·∫ßu m·ªôt cu·ªôc h·ªôi tho·∫°i m·ªõi üÜï
> [bold][#58A6FF]/history[/]: Xem danh s√°ch c√°c cu·ªôc h·ªôi tho·∫°i ƒë√£ c√≥ üìú
> [bold][#58A6FF]/load <id>[/]: T·∫£i l·∫°i l·ªãch s·ª≠ c·ªßa m·ªôt cu·ªôc h·ªôi tho·∫°i üìÇ
> [bold][#58A6FF]/file <path>[/]: ƒê√≠nh k√®m m·ªôt file v√†o tin nh·∫Øn ti·∫øp theo üìé
> [bold][#58A6FF]/clearfile[/]: G·ª° file ƒë√£ ƒë√≠nh k√®m üóëÔ∏è
> [bold][#58A6FF]/clear[/]: X√≥a tr·∫Øng m√†n h√¨nh chat hi·ªán t·∫°i üßπ
> [bold][#58A6FF]/logout[/]: X√≥a token ƒë√£ l∆∞u v√† tho√°t üö™
"""
            chat_history.mount(Static(help_text, classes="help-box"))
            chat_history.scroll_end()
        elif cmd == "/logout":
            if os.path.exists(TOKEN_FILE_PATH):
                try:
                    os.remove(TOKEN_FILE_PATH)
                    self.exit("Token ƒë√£ ƒë∆∞·ª£c x√≥a. Vui l√≤ng kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng 4T AI.")
                except Exception as e:
                    chat_history.mount(Static(f"[red]L·ªói khi x√≥a token: {e}[/red]"))
            else:
                self.exit("Kh√¥ng c√≥ token n√†o ƒë∆∞·ª£c l∆∞u ƒë·ªÉ x√≥a. ƒêang tho√°t kh·ªèi 4T AI...")
        elif cmd == "/new":
            await self.action_new_chat()
        elif cmd == "/history":
            await self.fetch_conversations()
        elif cmd == "/load":
            if args.isdigit():
                await self.load_conversation_history(int(args))
            else:
                chat_history.mount(Static(f"[red]L·ªói: ID cu·ªôc h·ªôi tho·∫°i kh√¥ng h·ª£p l·ªá.[/red]"))
        elif cmd == "/file":
            if os.path.exists(args):
                self.attached_file_path = args
            else:
                chat_history.mount(Static(f"[red]L·ªói: File kh√¥ng t·ªìn t·∫°i: {args}[/red]"))
        elif cmd == "/clearfile":
            self.attached_file_path = None
        elif cmd == "/clear":
            chat_history.query("*").remove()
        else:
            chat_history.mount(Static(f"[yellow]L·ªánh kh√¥ng x√°c ƒë·ªãnh: {cmd}.[/yellow]"))

    async def on_input_submitted(self, event: Input.Submitted) -> None:
      """X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng g·ª≠i input."""
      if event.input.id == "token-input":
          token = event.value.strip()
          if not token:
              self.mount_info_log("[red]Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.[/red]")
              return
          try:
              with open(TOKEN_FILE_PATH, "w") as f:
                  f.write(token)
          except Exception as e:
              self.mount_info_log(f"[red]Kh√¥ng th·ªÉ l∆∞u token: {e}[/red]")
          await self.perform_login(token)
      elif event.input.id == "chat-input":
          user_message = event.value.strip()
          event.input.value = ""
          if not user_message:
              return
          if user_message.startswith("/"):
              await self.handle_client_command(user_message, self.query_one("#chat-history"))
          else:
              chat_history = self.query_one("#chat-history")
              chat_history.mount(Static(""))
              chat_history.mount(Static(f">>> {user_message}"))
              chat_history.scroll_end()
              result = await send_chat_request(
                  self.http_client,
                  user_message,
                  self.current_conversation_id,
                  self.attached_file_path,
                  self.query_one("#chat-history")
              )
              if result == "auth_error":
                  self.query_one("#chat-input").disabled = True
              elif result is not None:
                  self.current_conversation_id = result
                  chat_history.scroll_end()
          self.attached_file_path = None

    async def fetch_conversations(self) -> None:
        """L·∫•y danh s√°ch c√°c cu·ªôc h·ªôi tho·∫°i."""
        if self.http_client:
            await fetch_conversations(self.http_client, self.query_one("#chat-history"))

    async def load_conversation_history(self, conv_id: int) -> None:
        """T·∫£i l·ªãch s·ª≠ cu·ªôc h·ªôi tho·∫°i."""
        if self.http_client:
            await load_conversation_history(self.http_client, conv_id, self.query_one("#chat-history"))
            self.current_conversation_id = conv_id

    def mount_info_log(self, text: str) -> None:
        """Hi·ªÉn th·ªã th√¥ng b√°o trong chat history."""
        log_widget = Static(text)
        self.query_one("#chat-history").mount(log_widget)
        self.query_one("#chat-history").scroll_end()

    async def action_new_chat(self) -> None:
        """B·∫Øt ƒë·∫ßu m·ªôt cu·ªôc h·ªôi tho·∫°i m·ªõi."""
        self.current_conversation_id = None
        self.attached_file_path = None
        self.query_one("#chat-history").query("*").remove()
        self.query_one("#chat-input").focus()
        self.mount_info_log("ƒê√£ b·∫Øt ƒë·∫ßu cu·ªôc h·ªôi tho·∫°i m·ªõi v·ªõi 4T AI.")
